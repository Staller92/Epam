/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.23
 * Generated at: 2017-11-28 21:42:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import app.Phonebook;
import app.Person;
import java.util.ArrayList;
import java.util.HashMap;

public final class List_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("app.Phonebook");
    _jspx_imports_classes.add("app.Person");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:f=\"http://java.sun.com/jsf/core\"\r\n");
      out.write("      xmlns:h=\"http://java.sun.com/jsf/html\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\r\n");
      out.write("    <title>Список людей</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

    // Phonebook phonebook = Phonebook.getInstance();
    String user_message = "";
    HashMap<String, String> jsp_parameters = new HashMap<String, String>();
    Phonebook phonebook = (Phonebook) request.getAttribute("phonebook");

    if (request.getAttribute("jsp_parameters") != null) {
        jsp_parameters = (HashMap<String, String>) request.getAttribute("jsp_parameters");
    }

    user_message = jsp_parameters.get("current_action_result_label");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<table align=\"center\" border=\"1\" width=\"90%\">\r\n");
      out.write("\r\n");
      out.write("    ");

        if ((user_message != null) && (!user_message.equals(""))) {
    
      out.write("\r\n");
      out.write("    <tr>\r\n");
      out.write("        <td colspan=\"6\" align=\"center\">");
      out.print(user_message);
      out.write("\r\n");
      out.write("        </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    ");

        }
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <tr>\r\n");
      out.write("        <td colspan=\"6\" align=\"center\"><a href=\"");
      out.print(request.getContextPath());
      out.write("/?action=add\">Добавить запись</a></td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("        <td align=\"center\"><b>Фамилия</b></td>\r\n");
      out.write("        <td align=\"center\"><b>Имя</b></td>\r\n");
      out.write("        <td align=\"center\"><b>Отчество</b></td>\r\n");
      out.write("        <td align=\"center\"><b>Телефон(ы)</b></td>\r\n");
      out.write("        <td align=\"center\">&nbsp;</td>\r\n");
      out.write("        <td align=\"center\">&nbsp;</td>\r\n");
      out.write("    </tr>\r\n");
      out.write("\r\n");
      out.write("    ");

        for (Person person : phonebook.getContents().values()) {

    
      out.write("\r\n");
      out.write("    <tr>\r\n");
      out.write("        <td>");
      out.print(person.getSurname());
      out.write("\r\n");
      out.write("        </td>\r\n");
      out.write("        <td>");
      out.print(person.getName());
      out.write("\r\n");
      out.write("        </td>\r\n");
      out.write("        <td>");
      out.print(person.getMiddlename());
      out.write("\r\n");
      out.write("        </td>\r\n");
      out.write("        <td>\r\n");
      out.write("            ");

                for (String phone : person.getPhones().values()) {
            
      out.write("\r\n");
      out.write("            ");
      out.print(phone);
      out.write("<br/>\r\n");
      out.write("            ");

                }
            
      out.write("\r\n");
      out.write("        </td>\r\n");
      out.write("        <td><a href=\"");
      out.print(request.getContextPath());
      out.write("/?action=edit&id=");
      out.print(person.getId());
      out.write("\">Редактировать</a></td>\r\n");
      out.write("        <td><a href=\"");
      out.print(request.getContextPath());
      out.write("/?action=delete&id=");
      out.print(person.getId());
      out.write("\">Удалить</a></td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    ");

        }
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
